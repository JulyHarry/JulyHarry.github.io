# GraphQL

## 介绍



## 对比



## 语法

### 变量类型

1. **Scalar Types（标量类型）:**     <span style="color:red;">**首字母大写**</span>

   - **Int:** 32位有符号整数。
   - **Float:** 双精度浮点数。
   - **String:** 字符串。
   - **Boolean:** 布尔值。
   - **ID:** 表示唯一标识符的字符串，通常用于指定数据库中的唯一键。

2. **Object Types（对象类型）:**

   - 定义了复合数据模型的对象。
   - 包含字段（Fields），每个字段有一个名称和一个类型。
   - 可以嵌套其他对象类型。

   例如：

   ```js
   type Person {
     name: String
     age: Int
   }
   ```

3. **List（列表类型）:**

   - 表示多个相同类型的值的列表。
   - 使用方括号 `[]` 表示。

   ```js
   type Post {
     comments: [String]
   }
   ```

4. **NonNull（非空类型）:**

   - 表示不能为null的类型。
   - 使用感叹号 `!` 表示。

   ```js
   type User {
     username: String!
   }
   ```

5. **Enum（枚举类型）:**

   - 表示有限集合的可能值。
   - 使用关键字 `enum` 定义。

   ```js
   enum Role {
     ADMIN
     USER
     GUEST
   }
   ```

### 页面查询

- 不带参数

<span style="color:red">query define_here 可以省略</span>

![截屏2024-01-21 23.33.53](/Users/hang/Documents/Notes/Pics/截屏2024-01-21 23.33.53.png)

- 带参数

![截屏2024-01-21 23.20.11](/Users/hang/Documents/Notes/Pics/截屏2024-01-21 23.20.11.png)

### 函数

同js, 括号里定义形参, <span style="color:red">需要定义类型</span>

```js
type Query {
  rollDice(numDice: Int!, numSides: Int): [Int]
}
```

调用端



### js实现

服务端

```js
//需要 express express-graphql graphql 三个包  (graphql 需最后安装)
var express = require('express');
var {buildSchema} = require('graphql');
var {graphqlHTTP} = require('express-graphql');

var schema = buildSchema(`
    type Account {
        id: ID
        age: Int
        account_name: String
        weight: Float
        haveHome: Boolean
        members: [String]
        getClassMates(classNo: Int!): [String]
    }
    type Query {
        name: String!
        account: Account
    }
`)

var root = {
    name: () => {
        return 'mac';
    },
    account: () => {
        return {
            id: 'fc00000001',
            age: 20,
            account_name: 'mac',
            weight: 170.32,
            haveHome: false,
            members: ['father', 'mother'],
            getClassMates: ({classNo}) => {
                const mates = {
                    1: ['mike', 'jerry'],
                    2: ['single', 'mac', 'tidy']
                }
                return mates[classNo]
            }
        }
    },
}

var app = express();

app.use('/graphql', graphqlHTTP({
        schema: schema,
        rootValue: root,
        graphiql: true //显示界面
    })
)

app.use(express.static('public'))

app.listen(4000);



```

调用端

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Index</title>
</head>
<body>
<button onclick="getData()">Get Data</button>
</body>
<script>
    function getData() {

        const query = `query {
        name
        account {
            id
            age
            account_name
            weight
            haveHome
            members
        } }`;

        fetch('/graphql', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                query: query,
                variables: null
            })
        })
            .then(r => r.json())
            .then(data => console.log("data: ", data))

        const query_w_args = `query get_account_classNo($no: Int!){
            name
            account {
                id
                age
                account_name
                weight
                haveHome
                members
                getClassMates(classNo: $no)
        } }`;

        const classNo = 1;
        const variables = {no: classNo};

        fetch('/graphql', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                query: query_w_args,
                variables: variables
            })
        })
            .then(r => r.json())
            .then(data => console.log("data: ", data))
    }
</script>
</html>
```

